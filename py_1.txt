
import uuid
from datetime import datetime

# 2. Create Classes and Methods
class Expense:
    def __init__(self, expense_id, date, category, description, amount):
        self.expense_id = expense_id
        self.date = date
        self.category = category
        self.description = description
        self.amount = amount
    
    def __str__(self):
        return f"{self.date} | {self.category} | {self.description} | ${self.amount:.2f}"


# 3. Data Storage
expenses = []

def add_expense(expense):
    expenses.append(expense)

def update_expense(expense_id, new_expense):
    for i, expense in enumerate(expenses):
        if expense.expense_id == expense_id:
            expenses[i] = new_expense
            return
    print("Expense not found.")

def delete_expense(expense_id):
    global expenses
    expenses = [expense for expense in expenses if expense.expense_id != expense_id]

def display_expenses():
    for expense in expenses:
        print(expense)


# 4. User Authentication
users = {
    "user1": "password123",
    "admin": "adminpass"
}

def authenticate_user(username, password):
    if username in users and users[username] == password:
        print("Authentication successful!")
        return True
    else:
        print("Authentication failed.")
        return False


# 5. Categorization and Summarization
def categorize_expenses():
    categories = {}
    for expense in expenses:
        if expense.category not in categories:
            categories[expense.category] = 0
        categories[expense.category] += expense.amount
    return categories

def summarize_expenses():
    total = sum(expense.amount for expense in expenses)
    return total


# 6. Functions for Repetitive Tasks
def calculate_total_expenses():
    return sum(expense.amount for expense in expenses)

def generate_summary_report():
    categorized = categorize_expenses()
    print("Expense Summary by Category:")
    for category, total in categorized.items():
        print(f"{category}: ${total:.2f}")
    total_expenses = calculate_total_expenses()
    print(f"Total Expenses: ${total_expenses:.2f}")


# 7. Simple CLI for Interaction
def cli():
    while True:
        print("\nExpense Tracker Menu")
        print("1. Add a new expense")
        print("2. Update an existing expense")
        print("3. Delete an expense")
        print("4. Display all expenses")
        print("5. Generate a summary report")
        print("6. Exit")
        
        choice = input("Enter your choice: ")
        
        if choice == "1":
            date = input("Enter the date (YYYY-MM-DD): ")
            category = input("Enter the category: ")
            description = input("Enter the description: ")
            amount = float(input("Enter the amount: "))
            expense_id = str(uuid.uuid4())
            expense = Expense(expense_id, date, category, description, amount)
            add_expense(expense)
        
        elif choice == "2":
            expense_id = input("Enter the expense ID to update: ")
            date = input("Enter the new date (YYYY-MM-DD): ")
            category = input("Enter the new category: ")
            description = input("Enter the new description: ")
            amount = float(input("Enter the new amount: "))
            new_expense = Expense(expense_id, date, category, description, amount)
            update_expense(expense_id, new_expense)
        
        elif choice == "3":
            expense_id = input("Enter the expense ID to delete: ")
            delete_expense(expense_id)
        
        elif choice == "4":
            display_expenses()
        
        elif choice == "5":
            generate_summary_report()
        
        elif choice == "6":
            print("Exiting...")
            break
        
        else:
            print("Invalid choice. Please try again.")

# 8. Run the program
def main():
    print("Welcome to the Expense Tracker")
    username = input("Enter username: ")
    password = input("Enter password: ")
    
    if authenticate_user(username, password):
        cli()
    else:
        print("Exiting due to failed authentication.")

if __name__ == "__main__":
    main()
